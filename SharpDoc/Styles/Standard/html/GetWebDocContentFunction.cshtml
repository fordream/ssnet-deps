@*
// Copyright (c) 2010-2013 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.       
// -------------------------------------------------------------------------------
// Override this template to modify the global behavior for each Dump functions
// -------------------------------------------------------------------------------
*@
@model SharpDoc.TemplateContext
@using System
@using System.IO
@using System.Text.RegularExpressions
@using System.Web
@using Newtonsoft.Json
@using SharpDoc.Model
@using System.Text;
@using System.Xml;
@using System.Net;

@using SharpDoc;

@functions
{
    private const string ConfluenceLink = "confluence:";

    public string FormatCredentialForAuthentification(NetworkCredential loginData)
    {
        // Format the loginData to match the site log formular
        return String.Format("{0}:{1}", loginData.UserName, loginData.Password);
    }

    public bool ConfluenceGetId(string webDoc, out long id)
    {
        id = 0;
        return webDoc.StartsWith(ConfluenceLink) && long.TryParse(webDoc.Substring(ConfluenceLink.Length), out id);
    }

    public void BuildTopic(IModelReference model)
    {
        var currentTopic = model as NTopic;
        var webDoc = Model.WebDocumentation;
        if (currentTopic != null && currentTopic.WebDoc != null)
        {
            if (currentTopic.WebDoc.StartsWith(ConfluenceLink))
            {
                ConfluenceBuildTopic(currentTopic, webDoc);
            }
        }
    }

    public string GetWikiContent(XmlNode webDocNode, bool useIdTitle)
    {
        string page = webDocNode.InnerText;
        
        var otherUrlAttribute = webDocNode.Attributes["url"];
        string otherUrl = (otherUrlAttribute != null) ? otherUrlAttribute.Value : null;

        var webDoc = Model.WebDocumentation;

        if (Model.Topic.WebDoc.StartsWith(ConfluenceLink))
        {
            return ConfluenceGetWikiContent(webDocNode, useIdTitle, webDoc, otherUrl, page);
        }
        else
        {
            string notFoundUri = (otherUrl != null) ? otherUrl + page : webDoc.GetAbsoluteUri(page).ToString();
            return string.Format("<div class='warning webNotFound'><div class='icon'></div>The page <a href='{0}'>{1}</a> could not be found in the extern web documentation.</div>", notFoundUri, page);
        }
    }

    private void ConfluenceBuildTopic(NTopic currentTopic, WebDocumentation webDoc)
    {
        long id;

        if (!ConfluenceGetId(currentTopic.WebDoc, out id))
        {
            // Compute ID from Confluence URL (should be in the form of "confluence:SPACE/Page")
            var url = currentTopic.WebDoc.Substring(ConfluenceLink.Length);
            var urlParts = url.Split('/');
            if (urlParts.Length != 2)
                throw new InvalidOperationException("Invalid Confluence URL format.");

            var restStream = webDoc.LoadPage(string.Format("../../rest/api/content?spaceKey={0}&title={1}", urlParts[0], urlParts[1]));
            if (restStream != null)
            {
                var restResult = new StreamReader(restStream).ReadToEnd();
                dynamic rest = JsonConvert.DeserializeObject<Dictionary<string, object>>(restResult);

                id = (long)rest["results"][0]["id"];
                currentTopic.WebDoc = ConfluenceLink + id;
            }
        }

        if (id != 0)
        {
            var restStream = webDoc.LoadPage(string.Format("../../rest/api/content/{0}/child/page", id));
            var restResult = new StreamReader(restStream).ReadToEnd();
            dynamic rest = JsonConvert.DeserializeObject<Dictionary<string, object>>(restResult);

            // Extract hierarchy
            foreach (var child in rest["results"])
            {
                // Add child as subtopics
                var childId = (string)child["id"];
                var title = (string)child["title"];
                
                // Extract Confluence page URL
                var childUrl = (string)child["_links"]["webui"];
                if (childUrl.Contains("/pages/viewpage.action?pageId="))
                {
                    // Node ID URL (register full URL)
                    // We have a space URL, so add ../.. to go to confluence root Uri first
                    childUrl = webDoc.GetAbsoluteUri("../.." + childUrl).ToString();
                }
                else
                {
                    // Standard URL
                    childUrl = childUrl.Substring(childUrl.LastIndexOf('/') + 1);
                }

                // Keep only simple characters
                var url = HttpUtility.UrlEncode(title);

                // If no character left (i.e. Japanese string), use ID
                if (string.IsNullOrEmpty(url))
                    url = childId;

                // Create Topic
                var childTopic = new NTopic { Name = title, FullName = title, WebDoc = ConfluenceLink + childId, PageId = url, Id = childUrl };
                currentTopic.SubTopics.Add(childTopic);
                childTopic.Content = "<webdoc>" + ConfluenceLink + childId + "</webdoc>";
            }
        }
    }

    private string ConfluenceGetWikiContent(XmlNode webDocNode, bool useIdTitle, WebDocumentation webDoc, string otherUrl, string page)
    {
        try
        {
            long id;
            if (!ConfluenceGetId(Model.Topic.WebDoc, out id))
                throw new InvalidOperationException("Invalid confluence URL.");
            
            var restStream = webDoc.LoadPage(string.Format("../../rest/api/content/{0}?expand=body.view", id));
            var restResult = new StreamReader(restStream).ReadToEnd();
            dynamic rest = JsonConvert.DeserializeObject<Dictionary<string, object>>(restResult);

            var body = (string) rest["body"]["view"]["value"];

            webDoc.LoadHtml(body);

            webDoc.InternalizeImages(Model.OutputDirectory, Model.Param.LinkToImg);
            webDoc.InternalizeUrls();

            var idAttr = webDocNode.Attributes["id"];
            var titleAttr = webDocNode.Attributes["title"];

            var externContent = new StringBuilder();

            if (useIdTitle)
            {
                if (idAttr != null)
                    externContent.AppendFormat("<div id='{0}'>", idAttr.Value).AppendLine();
                if (titleAttr != null)
                    externContent.AppendFormat("<div class='sub_section title'>{0}</div>", titleAttr.Value).AppendLine();
            }

            externContent.Append("<div class='externDoc'>").AppendLine();
                externContent.Append("<div id='com-atlassian-confluence' class='theme-documentation  aui-theme-default aui-layout splitter-invoked'>").AppendLine();
                    externContent.Append("<div id='full-height-container'>").AppendLine();
                        externContent.Append("<div id='splitter'>").AppendLine();
                            externContent.Append("<div id='splitter-content'>").AppendLine();
                                externContent.Append("<div class='aui-page-panel'>").AppendLine();
                                    externContent.Append("<div id='content' class='page view'>").AppendLine();

                                        externContent.Append(TagExpand(webDoc.Content, true)).AppendLine();

                                    externContent.Append("</div>").AppendLine();
                                externContent.Append("</div>").AppendLine();
                            externContent.Append("</div>").AppendLine();
                        externContent.Append("</div>").AppendLine();
                    externContent.Append("</div>").AppendLine();
                externContent.Append("</div>").AppendLine();
            externContent.Append("</div>").AppendLine();

            if (useIdTitle && idAttr != null)
                externContent.Append("</div>").AppendLine();

            return externContent.ToString();
        }
        catch (Exception)
        {
            string notFoundUri = (otherUrl != null) ? otherUrl + page : webDoc.GetAbsoluteUri(page).ToString();
            return string.Format("<div class='warning webNotFound'><div class='icon'></div>The content of the page <a href='{0}'>{1}</a> doesn't match the content extraction scheme.</div>", notFoundUri, page);
        }
    }

}

@{ 
    Model.GetWebDocContent = GetWikiContent;
    Model.BuildTopic = BuildTopic;
    if (Model.WebDocumentation != null)
    {
        Model.WebDocumentation.FormatCredential = FormatCredentialForAuthentification;
        Model.WebDocumentation.Authentify();
    }
}